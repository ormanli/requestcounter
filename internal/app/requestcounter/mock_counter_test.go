// Code generated by mockery. DO NOT EDIT.

package requestcounter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// Increment provides a mock function with given fields: ctx, delta
func (_m *MockCounter) Increment(ctx context.Context, delta int64) (int64, error) {
	ret := _m.Called(ctx, delta)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, delta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, delta)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, delta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCounter_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - delta int64
func (_e *MockCounter_Expecter) Increment(ctx interface{}, delta interface{}) *MockCounter_Increment_Call {
	return &MockCounter_Increment_Call{Call: _e.mock.On("Increment", ctx, delta)}
}

func (_c *MockCounter_Increment_Call) Run(run func(ctx context.Context, delta int64)) *MockCounter_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCounter_Increment_Call) Return(_a0 int64, _a1 error) *MockCounter_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_Increment_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *MockCounter_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
